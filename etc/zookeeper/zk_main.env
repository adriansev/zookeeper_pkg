#!/usr/bin/env bash

[[ "${0}" != "${BASH_SOURCE[0]}" ]] || { echo "This is an environment setting script, it should not be executed"; exit 1; }

# GET SERVICE CUSTOMIZATIONS : Customize location by editing zookeeper.service
export ZK_CFGDIR="${ZK_CFGDIR:-/etc/zookeeper}"

export ZK_CUSTOM_ENV="${ZK_CUSTOM_ENV:-${ZK_CFGDIR}/zk_custom.env}"
[[ -f "${ZK_CUSTOM_ENV}" ]] && source "${ZK_CUSTOM_ENV}"

export ZK_CUSTOM_OPTS="${ZK_CUSTOM_OPTS}"

export JMXLOCALONLY=${JMXLOCALONLY:-false}
export JMXAUTH=${JMXAUTH:-false}
export JMXSSL=${JMXSSL:-false}

JMXDISABLE=${JMXDISABLE:-false} # default if empty is disabled
# let's normalize the value, default is false
[[ ${JMXDISABLE} != "1" && ${JMXDISABLE,,} != "true" && ${JMXDISABLE,,} != "enabled" ]] && JMXDISABLE="1" || JMXDISABLE="0"
export JMXDISABLE
export JMXPORT=${JMXPORT}
export JMXHOSTNAME=${JMXHOSTNAME}

if [[ -z "${JMXPORT}" ]]; then
    export ZK_REMOTE_OPT=" -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=${JMXLOCALONLY} "
else
    export ZK_REMOTE_OPT=" -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=${JMXPORT} -Dcom.sun.management.jmxremote.authenticate=${JMXAUTH} "
    [[ -n ${JMXHOSTNAME} ]] && export ZK_REMOTE_OPT="${ZK_REMOTE_OPT} -Djava.rmi.server.hostname=${JMXHOSTNAME} "
fi

export JMXLOG4J=${JMXLOG4J:-true}
export ZK_LOGJ_OPT=" -Dzookeeper.jmx.log4j.disable=${JMXLOG4J} "

export SRV_MEM_OOM="-XX:+HeapDumpOnOutOfMemoryError"

# default heap for zookeeper server
ZK_SERVER_HEAP="${ZK_SERVER_HEAP:-1000}"
export SERVER_JVMFLAGS="-Xmx${ZK_SERVER_HEAP}m ${SERVER_JVMFLAGS}"

# default heap for zookeeper client
ZK_CLIENT_HEAP="${ZK_CLIENT_HEAP:-256}"
export CLIENT_JVMFLAGS="-Xmx${ZK_CLIENT_HEAP}m $CLIENT_JVMFLAGS"

[[ -f "${ZOOCFGDIR}/java.env" ]] && source "${ZOOCFGDIR}/java.env"

export ZK_LOG_DIR="${ZOO_LOG_DIR:-/var/log/zookeeper}"
mkdir -p "${ZK_LOG_DIR}"
ZK_LOG_FILE="${ZK_LOG_FILE:-zookeeper-${USER}-server-${HOSTNAME}.log}"
ZK_LOGS_OPT=" -Dzookeeper.log.dir=${ZK_LOG_DIR} -Dzookeeper.log.file=${ZK_LOG_FILE} "

## CREATION OF CLASSPATH
export ZK_JAR_DIR="${ZK_JAR_DIR:-/usr/share/java/zookeeper}"

# function to check if 2nd argument is already presend in 1st argument(which is an : separated array of strings)
__ITEM_IN_PATH () {
local LIST_STR ITEM path_arr n
[[ -z "${1}" ]] && return 1;
[[ -z "${2}" ]] && return 1;
LIST_STR="${1}"
ITEM="${2}"
IFS=':' read -ra path_arr <<< "${LIST_STR}"
for (( n=0; n < ${#path_arr[*]}; n++)); do [[ "$(realpath ${ITEM})" == "$(realpath ${path_arr[n]})" ]] && return 0; done
return 1;
}

# Insert 1st argument in CLASSPATH variable
__CLASSPATH_INS () { [[ -z "${1}" ]] && return 1; __ITEM_IN_PATH "${CLASSPATH}" "${1}" && return 0; export CLASSPATH="${1}${CLASSPATH:+:}${CLASSPATH}"; }

#add the default jar dir to classpath
__CLASSPATH_INS "${ZK_JAR_DIR}"

# add to CLASPATH all jars found in ${ZK_JAR_DIR}
JAR_LIST="$(find "${ZK_JAR_DIR}" -iname "*.jar")"
for JAR in ${JAR_LIST}; do __CLASSPATH_INS "${JAR}"; done

# Ansemble the java command line to be started by service unit
export ZK_JAVA_CMD=" ${SRV_MEM_OOM} ${SERVER_JVMFLAGS} ${ZK_LOGS_OPT} ${ZK_CUSTOM_OPTS} -Dzookeeper.datadir.autocreate=false -Dzookeeper.db.autocreate=false ${ZK_LOGJ_OPT} "
[[ "${JMXDISABLE}" == "0" ]] && export ZK_JAVA_CMD=" ${ZK_REMOTE_OPT} ${ZK_JAVA_CMD} "

return 0
